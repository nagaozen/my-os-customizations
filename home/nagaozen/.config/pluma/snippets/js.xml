<?xml version='1.0' encoding='utf-8'?>
<snippets language="js">
  <snippet>
    <text><![CDATA[var Site = {
	
	initialize: function() {
		$0
	}
	
}

window.addEvent("domready", Site.initialize);]]></text>
    <tag>site</tag>
    <description>site</description>
  </snippet>
  <snippet>
    <text><![CDATA[/* Class: ${1:Name}
 * 
 * ${2:description}
 * 
 * About:
 * 
 * 	- Written by Fabio Zendhi Nagao <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
 */
var $1 = new Class({ Implements: [Chain, Events, Options],
	
	options: {
		
	},
	
	initialize: function(element, options) {
		this.setOptions(options);
		$0
	}
	
});]]></text>
    <tag>class</tag>
    <description>class</description>
  </snippet>
  <snippet>
    <text><![CDATA[if(${1:condition}) {
	$0
}]]></text>
    <tag>if</tag>
    <description>if</description>
  </snippet>
  <snippet>
    <text><![CDATA[else {
	$0
}]]></text>
    <tag>else</tag>
    <description>else</description>
  </snippet>
  <snippet>
    <text><![CDATA[switch(${1:variable}) {
	case ${2:value}:
		$0
		break;
	
	default:
		
}]]></text>
    <tag>switch</tag>
    <description>switch</description>
  </snippet>
  <snippet>
    <text><![CDATA[case ${2:value}:
	$0
	break;]]></text>
    <tag>case</tag>
    <description>case</description>
  </snippet>
  <snippet>
    <text><![CDATA[for(var ${1:i} = 0, len = ${2:length}; $1 < len; $1++) {
	$0
}]]></text>
    <tag>for</tag>
    <description>for</description>
  </snippet>
  <snippet>
    <text><![CDATA[for(var ${1:object} in ${2:colletion}) {
	if($2.hasOwnProperty($1)) {
		$0
	}
}]]></text>
    <tag>foreach</tag>
    <description>foreach</description>
  </snippet>
  <snippet>
    <text><![CDATA[while(${1:condition}) {
	$0
}]]></text>
    <tag>while</tag>
    <description>while</description>
  </snippet>
  <snippet>
    <text><![CDATA[do {
	$0
} while(${1:condition});]]></text>
    <tag>do</tag>
    <description>do</description>
  </snippet>
  <snippet>
    <text><![CDATA[try {
	$0
} catch(Ex) {
	alert(Ex.description);
}]]></text>
    <tag>try</tag>
    <description>try</description>
  </snippet>
  <snippet>
    <text><![CDATA[throw "${1:message}";$0]]></text>
    <tag>throw</tag>
    <description>throw</description>
  </snippet>
  <snippet>
    <text><![CDATA[/* Function: ${1:name}
 *  
 * ${3:description}
 * 
 * Parameters:
 * 
 * 	(type) - description
 * 
 * Returns:
 * 
 * 	(type) - description
 * 
 * Example:
 * 
 * (start code)
 * 
 * 
 * 
 * (end code)
 * 
 */ 
function $1(${2:[arguments]}) {
	$0
}]]></text>
    <tag>function</tag>
    <description>function</description>
  </snippet>
  <snippet>
    <text><![CDATA[ * Property: ${1:name}
 * 
 * ${4:description}
 * 
 * Contains:
 * 
 * 	(type) - ${3:description}
 */ 
this.$1 = ${2:value};$0]]></text>
    <tag>property</tag>
    <description>property</description>
  </snippet>
  <snippet>
    <text><![CDATA[window.addEvent("domready", function(){
    $0
});]]></text>
    <tag>domready</tag>
    <description>domready</description>
  </snippet>
  <snippet>
    <text><![CDATA[{
    "type": "object",
    "properties": {
        $0
    },
    "additionalProperties": false
}]]></text>
    <tag>schema</tag>
    <description>schema</description>
  </snippet>
  <snippet>
    <text><![CDATA["${1:variable}": {
    "type": "string",
    "description": "${2:about}",
    "required": true,
    "enum": [<list of values>],
    "minLength": <int>,
    "maxLength": <int>,
    "pattern": "<regexp>",
    "format": "date-time"
}]]></text>
    <tag>string</tag>
    <description>string</description>
  </snippet>
  <snippet>
    <text><![CDATA["${1:variable}": {
    "type": "number",
    "description": "${2:about}",
    "required": true,
    "enum": [<list of values>],
    "minimum": <int>,
    "maximum": <int>
}]]></text>
    <tag>number</tag>
    <description>number</description>
  </snippet>
  <snippet>
    <text><![CDATA["${1:variable}": {
    "type": "integer",
    "description": "${2:about}",
    "required": true,
    "enum": [<list of values>],
    "minimum": <int>,
    "maximum": <int>
}]]></text>
    <tag>integer</tag>
    <description>integer</description>
  </snippet>
  <snippet>
    <text><![CDATA["${1:variable}": {
    "type": "boolean",
    "description": "${2:about}",
    "required": true
}]]></text>
    <tag>boolean</tag>
    <description>boolean</description>
  </snippet>
  <snippet>
    <text><![CDATA[(function(){
    var global = (function(){return this;}).call();
    $0
})();]]></text>
    <tag>js</tag>
    <description>js</description>
  </snippet>
  <snippet>
    <text><![CDATA[var ${1:identifier} = new Surface({
    size: [${2:undefined}, ${3:undefined}]
  , content: "${4:content}"
  , properties: {
        ${5:properties}
    }
});

${6:View}.add($1);
$1.pipe($6);
$0]]></text>
    <tag>surface</tag>
    <description>surface</description>
  </snippet>
  <snippet>
    <text><![CDATA[var Engine = require('famous/core/Engine');
var Surface = require('famous/core/Surface');
var Transform = require('famous/core/Transform');
var StateModifier = require('famous/modifiers/StateModifier');
var EventHandler = require('famous/core/EventHandler');
var Transitionable = require('famous/transitions/Transitionable');
var SpringTransition = require('famous/transitions/SpringTransition');
Transitionable.registerMethod('spring', SpringTransition);

var App  = Engine.createContext();
var O    = new StateModifier({
    origin: [.5, .5]
});
var View = new View();

App.add(O).add(View);

$0]]></text>
    <tag>app</tag>
    <description>app</description>
  </snippet>
  <snippet>
    <text><![CDATA[var ${1:identifier} = new StateModifier({
    transform: Transform.translate(${2:x}, ${3:y}, ${4:z})
});
$0]]></text>
    <tag>translate</tag>
    <description>translate</description>
  </snippet>
  <snippet>
    <text><![CDATA[var ${1:identifier} = new StateModifier({
    transform: Transform.rotate${2:Z}(${3:deg})
});
$0]]></text>
    <tag>rotate</tag>
    <description>rotate</description>
  </snippet>
  <snippet>
    <text><![CDATA[var ${1:identifier} = new StateModifier({
    transform: Transform.scale(${2:x}, ${3:y}, ${4:z})
});
$0]]></text>
    <tag>scale</tag>
    <description>scale</description>
  </snippet>
</snippets>
