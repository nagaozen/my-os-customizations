<?xml version='1.0' encoding='utf-8'?>
<snippets language="asp">
  <snippet>
    <text><![CDATA[Request.QueryString("${1:variable}")()$0]]></text>
    <tag>rq</tag>
    <description>Request.QueryString</description>
  </snippet>
  <snippet>
    <text><![CDATA[Request.Form("${1:variable}")()$0]]></text>
    <tag>rf</tag>
    <description>Request.Form</description>
  </snippet>
  <snippet>
    <text><![CDATA[Request.ServerVariables("${1:variable}")$0]]></text>
    <tag>sv</tag>
    <description>Request.ServerVariables</description>
  </snippet>
  <snippet>
    <text><![CDATA[Response.write ${1:content}$0]]></text>
    <tag>rw</tag>
    <description>Response.write</description>
  </snippet>
  <snippet>
    <text><![CDATA[call ${1:subroutine}(${2:arguments})$0]]></text>
    <tag>call</tag>
    <description>call</description>
  </snippet>
  <snippet>
    <text><![CDATA[if(${1:condition}) then
	$0
end if]]></text>
    <tag>if</tag>
    <description>if</description>
  </snippet>
  <snippet>
    <text><![CDATA[' Class: ${1:name}
'
' ${2:description}
'
' About:
'
' 	- Written by Fabio Zendhi Nagao <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'
class $1

	' --[ Public section ]------------------------------------------------------

	' Property: classType
	'
	' Class type.
	'
	' Contains:
	'
	'	(string) - type
	'
	public classType

	' Property: classVersion
	'
	' Class version.
	'
	' Contains:
	'
	'	(string) - version
	'
	public classVersion

	$0

	' --[ Private section ]-----------------------------------------------------

	private sub Class_initialize()
		classType    = typename(Me)
		classVersion = "1.0.0"
	end sub

	private sub Class_terminate()
	end sub

end class]]></text>
    <tag>class</tag>
    <description>class</description>
  </snippet>
  <snippet>
    <text><![CDATA[' Property: ${1:name}
'
' ${2:description}
'
' Contains:
'
' 	(${3:type}) - ${4:short_description}
'
public $1
$0]]></text>
    <tag>prop</tag>
    <description>property</description>
  </snippet>
  <snippet>
    <text><![CDATA[' Function: ${1:name}
'
' ${3:description}
'
' Parameters:
'
' 	(type) - description
'
' Returns:
'
' 	(type) - description
'
' Example:
'
' (start code)
'
'
'
' (end code)
'
public function $1(${2:arguments})
	$1 = $0
end function]]></text>
    <tag>fn</tag>
    <description>function</description>
  </snippet>
  <snippet>
    <text><![CDATA[' Subroutine: ${1:name}
'
' ${3:description}
'
public sub $1(${2:arguments})
	$0
end sub]]></text>
    <tag>sub</tag>
    <description>sub</description>
  </snippet>
  <snippet>
    <text><![CDATA[elseif(${1:condition}) then
	$0]]></text>
    <tag>elseif</tag>
    <description>elseif</description>
  </snippet>
  <snippet>
    <text><![CDATA[select case ${1:variable}
	case ${2:value}:
	$0

	case else:

end select]]></text>
    <tag>case</tag>
    <description>select</description>
  </snippet>
  <snippet>
    <text><![CDATA[for ${1:expression}
	$0
next]]></text>
    <tag>for</tag>
    <description>for</description>
  </snippet>
  <snippet>
    <text><![CDATA[for each ${1:entry} in ${2:collection}
	$0
next]]></text>
    <tag>foreach</tag>
    <description>foreach</description>
  </snippet>
  <snippet>
    <text><![CDATA[do
	$0
loop while(${1:expression})]]></text>
    <tag>do</tag>
    <description>do</description>
  </snippet>
  <snippet>
    <text><![CDATA[while(${1:expression})
	$0
wend]]></text>
    <tag>while</tag>
    <description>while</description>
  </snippet>
  <snippet>
    <text><![CDATA[<!--#include ${1:virtual}="${2:path}"-->$0]]></text>
    <tag>inc</tag>
    <description>include</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:variable} = Server.createObject("Scripting.FileSystemObject")
$0
set $1 = nothing]]></text>
    <tag>fso</tag>
    <description>fso</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:variable} = Server.createObject("Scripting.Dictionary")
$0
set $1 = nothing]]></text>
    <tag>sd</tag>
    <description>sd</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:Conn} = Server.createObject("ADODB.Connection")
$1.open(${2:connectionstring})
$0
$1.close()
set $1 = nothing]]></text>
    <tag>conn</tag>
    <description>conn</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:Rs} = Server.createObject("ADODB.Recordset")
$1.cursorType = ${2:adOpenStatic}
$1.lockType   = ${3:adLockReadOnly}

$1.open(${4:Cmd})
$0
$1.close()

set $1 = nothing]]></text>
    <tag>rs</tag>
    <description>rs</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:Cmd} = Server.createObject("ADODB.Command")
set $1.activeConnection = ${2:Conn}
$1.commandType = ${3:adCmdStoredProc}
$1.commandText = ${4:query}
$0
set $1.activeConnection = nothing
set $1 = nothing]]></text>
    <tag>cmd</tag>
    <description>cmd</description>
  </snippet>
  <snippet>
    <text><![CDATA[with ${1:object}
	$0
end with]]></text>
    <tag>with</tag>
    <description>with</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:Object} = ${2:Class}
$0
set $1 = nothing]]></text>
    <tag>set</tag>
    <description>set</description>
  </snippet>
  <snippet>
    <text><![CDATA[Cmd.Parameters.append Cmd.createParameter("@${1:name}", ${2:type}, adParamInput, ${3:size})
Cmd.Parameters("@$1").value = ${4:value}
$0]]></text>
    <tag>param</tag>
    <description>param</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:Stream} = Server.createObject("ADODB.Stream")
$1.type = adTypeText
$1.mode = adModeReadWrite
$1.open()

$0

$1.position = 0
${2:variable} = $1.readText()

$1.close()
set $1 = nothing]]></text>
    <tag>stream</tag>
    <description>stream</description>
  </snippet>
  <snippet>
    <text><![CDATA[' Event: ${1:name}
'
' ${2:description}
'
' Contains:
'
' 	(${3:type}) - ${4:argument}
'
public $1
$0]]></text>
    <tag>event</tag>
    <description>event</description>
  </snippet>
  <snippet>
    <text><![CDATA[dim ${1:Re} : set $1 = new RegExp
$1.pattern = ${2:pattern}
$1.ignoreCase = ${3:true}
$1.global = ${4:true}

$0

set $1 = nothing]]></text>
    <tag>re</tag>
    <description>re</description>
  </snippet>
  <snippet>
    <text><![CDATA[dim ${1:Xhr} : set $1 = Server.createObject("MSXML2.ServerXMLHTTP.6.0")
$1.open "${2:POST}", ${3:url}, ${4:async}
$1.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
$1.send(${5:data})

${6:content} = $1.responseText

set $1 = nothing]]></text>
    <tag>xhr</tag>
    <description>xhr</description>
  </snippet>
  <snippet>
    <text><![CDATA[<%

' Class: ${1:name}
'
' ${2:description}
'
' About:
'
' 	- Written by Fabio Zendhi Nagao <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'
class $1' extends Interface

	' --[ Inheritance ]---------------------------------------------------------
	public Parent

	public property set Implementation(I)
		set Parent.Implementation = I
	end property

	public property get Implementation
		set Implementation = Parent.Implementation
	end property

	public property get requireds
		requireds = Parent.requireds
	end property

	public function check()
		check = Parent.check()
	end function

	' --[ Interface definition ]------------------------------------------------

	' Property: classType
	'
	' Class type.
	'
	' Contains:
	'
	'	(string) - type
	'
	public classType

	' Property: classVersion
	'
	' Class version.
	'
	' Contains:
	'
	'	(string) - version
	'
	public classVersion

	$0

	' --[ Protected section ]---------------------------------------------------

	' --[ Private section ]-----------------------------------------------------

	private sub Class_initialize()
		classType    = typename(Me)
		classVersion = "1.0.0"

		set Parent = new Interface
		Parent.requireds = array()
	end sub

	private sub Class_terminate()
		set Parent = nothing
	end sub

end class

%>]]></text>
    <tag>interface</tag>
    <description>interface</description>
  </snippet>
  <snippet>
    <text><![CDATA[<%

' Class: ${1:name}.asp
'
' ${3:description}
'
' About:
'
'	- Written by Fabio Zendhi Nagao (nagaozen) <http://zend.lojcomm.com.br> @ $<4:import datetime;return datetime.datetime.now().strftime("%b")> $<5:import datetime;return datetime.datetime.now().year>
'
class ${1:name}' implements ${2:Interface}

	' --[ Interface ]-----------------------------------------------------------
	public Interface

	' --[ Adapter definition ]--------------------------------------------------

	' Property: classType
	'
	' Class type.
	'
	' Contains:
	'
	'	(string) - type
	'
	public classType

	' Property: classVersion
	'
	' Class version.
	'
	' Contains:
	'
	'	(string) - version
	'
	public classVersion

	$0

	' --[ Private section ]-----------------------------------------------------

	private sub Class_initialize()
		classType    = typename(Me)
		classVersion = "1.0.0"

		set Interface = new $2
		set Interface.Implementation = Me
		if(not Interface.check) then
			Err.raise 17, "Evolved AXE runtime error", strsubstitute( _
				"Can't perform requested operation. '{0}' is a bad interface implementation of '{1}'", _
				array(classType, typename(Interface)) _
			)
		end if
	end sub

	private sub Class_terminate()
		set Interface.Implementation = nothing
		set Interface = nothing
	end sub

end class

%>]]></text>
    <tag>adapter</tag>
    <description>adapter</description>
  </snippet>
  <snippet>
    <text><![CDATA[<%

' File: ${1:name}Model.asp
'
' ${2:description}
'
' About:
'
'	- Written by Fabio Zendhi Nagao (nagaozen) <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'
class $<[1]: return $1[0].upper() + $1[1:] >Model

	' Property: classType
	'
	' Class type.
	'
	' Contains:
	'
	'	(string) - type
	'
	public classType

	' Property: classVersion
	'
	' Class version.
	'
	' Contains:
	'
	'	(string) - version
	'
	public classVersion

	' Property: Adapter
	'
	' Interface implementation
	'
	' Contains:
	'
	'	(Interface) - Adapter implementing Interface
	'
	public Adapter

	$0

	' Function: toXML
	'
	' Returns a XML representation of this model.
	'
	' Parameters:
	'
	'	(string) - root node of the recursion
	'
	' Returns:
	'
	'	(string) - XML representation
	'
	' Example:
	'
	' (start code)
	'
	' dim Model : set Model = new $<[1]: return $1.capitalize() >Model
	' '.
	' '. initialize it
	' '.
	' Response.write(Model.toXML())
	' set Model = nothing
	'
	' (end code)
	'
	public function toXML()
		dim M : set M = [_μ]()
		toXML = JSON.toXML( M, "$1" )
		set M = nothing
	end function

	' Function: toJSON
	'
	' Returns a JSON representation of this model.
	'
	' Parameters:
	'
	'	(string) - root node of the recursion
	'
	' Returns:
	'
	'	(string) - JSON representation
	'
	' Example:
	'
	' (start code)
	'
	' dim Model : set Model = new $<[1]: return $1.capitalize() >Model
	' '.
	' '. initialize it
	' '.
	' Response.write(Model.toJSON())
	' set Model = nothing
	'
	' (end code)
	'
	public function toJSON()
		dim M : set M = [_μ]()
		toJSON = JSON.stringify( M )
		set M = nothing
	end function

	' --[ Private section ]-----------------------------------------------------

	private sub Class_initialize()
		classType    = typename(Me)
		classVersion = "1.0.0"
	end sub

	private sub Class_terminate()
	end sub

	' Subroutine: [_ε]
	'
	' {private} Checks for an adapter assignment.
	'
	private sub [_ε]
		if( isEmpty(Adapter) ) then
			Err.raise 5, "Evolved AXE runtime error", "Invalid procedure call or argument. Missing an Adapter."
		end if
	end sub

	' Function: [_μ]
	'
	' {private} Model REST datasource.
	'
	private function [_μ]()
		dim M : set M = JSON.parse("{}")

		' M.set "public_property", "value"

		set [_μ] = M

		set M = nothing
	end function

end class

%>]]></text>
    <tag>model</tag>
    <description>model</description>
  </snippet>
  <snippet>
    <text><![CDATA[<!--#include virtual="/lib/axe/singletons.initialize.asp"-->
<!--#include virtual="/lib/axe/shuttle.unload.initialize.asp"-->
<%

' File: ${1:name}View.asp
'
' ${2:Description}
'
' Written by Fabio Zendhi Nagao (nagaozen) <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'

%>
$0
<!--#include virtual="/lib/axe/shuttle.unload.finalize.asp"-->
<!--#include virtual="/lib/axe/singletons.finalize.asp"-->]]></text>
    <tag>view</tag>
    <description>view</description>
  </snippet>
  <snippet>
    <text><![CDATA[<!--#include virtual="/lib/axe/singletons.initialize.asp"-->
<%

' File: ${1:name}.asp
'
' ${2:Description}
'
' About:
'
'	- Written by Fabio Zendhi Nagao (nagaozen) <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'
class $<[1]: return $1[0].upper() + $1[1:] >Controller

' --[ Public section ]----------------------------------------------------------

	public sub defaultAction()
		dim datasource, template, transformation

		$0

		Session("this")("Output.ds")   = datasource
		Session("this")("Output.tpl")  = template
		Session("this")("Output.value") = transformation
	end sub

' --[ Private section ]---------------------------------------------------------

end class



' --[ Events ]------------------------------------------------------------------


%>
<!--#include virtual="/lib/axe/mvc.bootstrapper.asp"-->
<!--#include virtual="/lib/axe/singletons.finalize.asp"-->]]></text>
    <tag>controller</tag>
    <description>controller</description>
  </snippet>
  <snippet>
    <text><![CDATA[
ON ERROR RESUME NEXT : Err.clear()

' try
	${1:try_something}

if( Err.number <> 0 ) then

	' catch Exception
	Ex = array(Err.source, Err.number, Err.description)
	Err.clear()

ON ERROR GOTO 0

	' handle Ex
	${2:handle_exception}

end if

' finally
${3:finally}

ON ERROR GOTO 0

$0]]></text>
    <tag>try</tag>
    <description>try</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${1:Sb} = new StringBuilder
$0
${2:content} = $1.toString()
set $1 = nothing]]></text>
    <tag>sb</tag>
    <description>stringbuilder</description>
  </snippet>
  <snippet>
    <text><![CDATA[set ${2:Rs} = ${1:Cmd}.execute(${3:ra}${4:,,adExecuteNoRecords})
while( not $2.eof )
	$0
	$2.moveNext()
wend
$2.close()
set $2 = nothing]]></text>
    <tag>cmde</tag>
    <description>cmd_execute</description>
  </snippet>
  <snippet>
    <text><![CDATA[<%

' File: ${1:name}Model.asp
'
' ${2:description}
'
' Dependencies:
'
'	- collectionModel.asp
'
' About:
'
'	- Written by Fabio Zendhi Nagao (nagaozen) <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'
class $<[1]: return $1[0].upper() + $1[1:] >Model' extends CollectionModel

	' --[ Public section ]------------------------------------------------------

	public default function [new](byRef connection)
		set Me.connection = connection
		set [new] = Me
	end function

	public classType
	public classVersion
	public connection

	$0

	' --[ Delegation ]--

	public property get Items()
		set Items = [_ß].Items()
	end property

	public sub [empty]()
		[_ß].empty()
	end sub

	public function push(v)
		push = [_ß].push(v)
	end function

	public function toBinMapByProperty(byVal field)
		set toBinMapByProperty = [_ß].toBinMapByProperty(field)
	end function

	public function toBinXmlFriendly(byVal itemTag)
		set toBinXmlFriendly = [_ß].toBinXmlFriendly(itemTag)
	end function

	public function toXML(byVal collectionTag, byVal itemTag)
		toXML = [_ß].toXML(collectionTag, itemTag)
	end function

	public function toJSON()
		toJSON = [_ß].toJSON()
	end function

	' --[ Private section ]-----------------------------------------------------

	private [_ß]

	private sub Class_initialize()
		classType    = typename(Me)
		classVersion = "1.0.0.0"

		set [_ß] = new CollectionModel
	end sub

	private sub Class_terminate()
		set [_ß] = nothing
	end sub

	private sub [_ε]
		if( isEmpty(connection) ) then
			Err.raise 91, []("{0} runtime error", typename(Me)), "Object variable not set. Missing a connection."
		end if
		if( not isObject(connection) ) then
			Err.raise 5, []("{0} runtime error", typename(Me)), "Invalid procedure call or argument. Connection is not an object."
		end if
	end sub

end class

%>]]></text>
    <tag>coll</tag>
    <description>coll</description>
  </snippet>
  <snippet>
    <text><![CDATA[${1:Conn}.beginTrans()

on error resume next : Err.clear()

' try
$0

if( Err.number <> 0 ) then
	' catch Exception
	dim Ex : Ex = array(Err.source, Err.number, Err.description)
	Err.clear()
	on error goto 0

	' handle Ex
	$1.rollbackTrans()

	Err.raise 17, []("{0} runtime error", typename(Me)), []("Can't perform requested operation. {2}", Ex)
else
	$1.commitTrans()
end if

' finally

on error goto 0]]></text>
    <tag>tran</tag>
    <description>tran</description>
  </snippet>
  <snippet>
    <text><![CDATA[public sub ${1:name}() : [π].set typename(Me) , "$1"
	dim ${2:Ctx}${3:, Conn}

	[alloc] Ctx, [!!]("{ 'Actors': {} }")
	[alloc] Conn, Server.createObject("ADODB.Connection")
	Conn.open( Application("connectionstring") )

	' --( handle input )-- '


	' define actors
	with Ctx.Actors
	end with

	' invoke plugins define
	[π].define Ctx.Actors

	' bind events


	' invoke plugins bind
	[π].bind Ctx.Actors

	' invoke plugins before action
	[π].beforeAction Ctx

	' action!
	$0

	Session("this")("Output.xml")   = "Empty"
	Session("this")("Output.xslt")  = "Empty"
	Session("this")("Output.value") = "Empty"

	' invoke plugins after action
	[π].afterAction Ctx

	' release unmanaged resources
	with Ctx.Actors
	end with

	Conn.close()
	[free] Conn
	[free] Ctx
end sub]]></text>
    <tag>action</tag>
    <description>action</description>
  </snippet>
  <snippet>
    <text><![CDATA[<!--#include virtual="/lib/axe/singletons.initialize.asp"-->
<!--#include virtual="/lib/axe/firephp.console.initialize.asp"-->
<%

' File: ${1:name}.asp
'
' ${2:Description}
'
' About:
'
'	- Written by Fabio Zendhi Nagao (nagaozen) <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'
require("/app/controllers/${7:Taxonomy}/${8:name}Processes.asp")

class $<[1]: return $1[0].upper() + $1[1:] >Controller

	' --[ Public section ]------------------------------------------------------

	public sub defaultAction()
		call ${5:action}()
	end sub

	public sub $5() : [Cπ].set typename(Me) , "$5"
		dim ${6:Scope, Conn}

		set Conn = Server.createObject("ADODB.Connection")
		Conn.open( Application("connectionString") )

		set Scope = JSON.parse("{ ""Actors"": {} }")
		with Scope.Actors
			' define actors

			' invoke plugins define
			call [Cπ].define( Scope.Actors )

			' bind events


			' invoke plugins bind
			call [Cπ].bind( Scope.Actors )

			' invoke plugins before action
			call [Cπ].beforeAction( Scope )

			' action!
			$0

			Session("this")("Output.xml")   = "Empty"
			Session("this")("Output.xslt")  = "Empty"
			Session("this")("Output.value") = "Empty"

			' invoke plugins after action
			call [Cπ].afterAction( Scope )
		end with
		set Scope = nothing

		Conn.close()
		set Conn = nothing
	end sub

	' --[ Private section ]-----------------------------------------------------

	private [_ß]

	private sub Class_initialize()
		set [_ß] = new BaseController
	end sub

	private sub Class_terminate()
		set [_ß] = nothing
	end sub

end class



' --[ Events ]------------------------------------------------------------------


%>
<!--#include virtual="/lib/axe/mvc.bootstrapper.asp"-->
<!--#include virtual="/lib/axe/firephp.console.finalize.asp"-->
<!--#include virtual="/lib/axe/singletons.finalize.asp"-->]]></text>
    <tag>eC</tag>
    <description>std evolved controller</description>
  </snippet>
  <snippet>
    <text><![CDATA[<%

' File: ${1:name}Processes.asp
'
' ${2:Description}
'
' About:
'
'	- Written by Fabio Zendhi Nagao (nagaozen) <http://zend.lojcomm.com.br> @ $<3:import datetime;return datetime.datetime.now().strftime("%b")> $<4:import datetime;return datetime.datetime.now().year>
'
class $<[1]: return $1[0].upper() + $1[1:] >Processes

	' --[ Public section ]------------------------------------------------------

	public sub ${5:action}(byRef Scope${6:, byRef Conn}) : [Pπ].set typename(Me) , "$5"
		with Scope.Actors
			' define actors

			' invoke plugins define
			call [Pπ].define( Scope.Actors )

			' bind events


			' invoke plugins bind
			call [Pπ].bind( Scope.Actors )

			' invoke plugins before action
			call [Pπ].beforeAction( Scope )

			' action!
			$0

			' invoke plugins after action
			call [Pπ].afterAction( Scope )
		end with
	end sub

	' --[ Private section ]-----------------------------------------------------



end class





' --[ Events ]------------------------------------------------------------------

]]></text>
    <tag>eP</tag>
    <description>std evolved processes</description>
  </snippet>
  <snippet>
    <text><![CDATA[public sub ${1:process}(byRef Scope${2:, byRef Conn}) : [Pπ].set typename(Me) , "$1"
	with Scope.Actors
		' define actors

		' invoke plugins define
		call [Pπ].define( Scope.Actors )

		' bind events


		' invoke plugins bind
		call [Pπ].bind( Scope.Actors )

		' invoke plugins before action
		call [Pπ].beforeAction( Scope )

		' action!
		$0

		' invoke plugins after action
		call [Pπ].afterAction( Scope )
	end with
end sub]]></text>
    <tag>process</tag>
    <description>process</description>
  </snippet>
  <snippet>
    <text><![CDATA[    {
		"id": "$<[1]: return $1[0].upper() + $1[1:] >Plugin"
		, "path": "/instance/plugins/${1:name}"
		, "extends": {
			"${2:DefaultController}": true
		}
	}]]></text>
    <tag>pentry</tag>
    <description>plugin.entry</description>
  </snippet>
  <snippet>
    <text><![CDATA[public property get ${1:prop}
	$1 = [μ].$1
end property

public property let $1(byVal value)
	[μ].set "$1", value
end property

$0]]></text>
    <tag>lgprop</tag>
    <description>lgprop</description>
  </snippet>
  <snippet>
    <text><![CDATA[Cmd.Parameters.append Cmd.createParameter("@${1:name}", adNumeric, adParamInput, 9)
Cmd.Parameters("@$1").precision = 18
Cmd.Parameters("@$1").numericScale = 6
$0]]></text>
    <tag>num</tag>
    <description>adNumeric_param</description>
  </snippet>
</snippets>
